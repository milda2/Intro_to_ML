import numpy as np
import torch # the magical NN package
from torch import nn, optim

import matplotlib
%matplotlib inline
import matplotlib.pyplot as plt

torch.manual_seed(42) #This is to get the same result everytime

#@title Helper Functions (for generating random dataset)

#Modified from https://github.com/tensorflow/playground/blob/master/src/dataset.ts 

def generate_dataset1(n=200):
  np.random.seed(42)
  r1 = 2*np.random.rand(n)
  angle = np.random.rand((n))*2*np.pi
  x1 = r1*np.cos(angle)
  y1 = r1*np.sin(angle)
  data1 = np.asarray((x1,y1))

  r2 = 2*np.random.rand(n) +3
  angle2 = np.random.rand((n))*2*np.pi
  x2 = r2*np.cos(angle)
  y2 = r2*np.sin(angle)
  data2 = np.asarray((x2,y2))

  data = np.swapaxes(np.concatenate((data1,data2), axis =-1),0,1)
  labels = np.concatenate((np.zeros(n, dtype=int), np.ones(n, dtype=int)))

  #shuffle
  c = list(zip(data, labels))
  np.random.shuffle(c)
  data, labels = zip(*c)

  return np.asarray(data), np.asarray(labels)

def generate_dataset2(n=100):
  np.random.seed(42)
  def genSpiral(n, d, noise=0.01):
    x =[]
    y =[]
    for k in range(n):
      r = k/n*5
      t = 1.75*k/ n * 2 * np.pi + d
      x.append(r*np.sin(t) + (2*np.random.rand()-1) * noise)
      y.append(r*np.cos(t) + (2*np.random.rand()-1) * noise)
    return np.asarray(x), np.asarray(y)

  x1, y1 = genSpiral(n, 0)
  data1 = np.asarray((x1,y1))

  x2, y2 = genSpiral(n, np.pi)
  data2 = np.asarray((x2,y2))

  data = np.swapaxes(np.concatenate((data1,data2), axis =-1),0,1)
  labels = np.concatenate((np.zeros(n, dtype=int), np.ones(n, dtype=int)))

  #shuffle
  c = list(zip(data, labels))
  np.random.shuffle(c)
  data, labels = zip(*c)

  return np.asarray(data), np.asarray(labels)
  
y = np.array([0,1,1,1,0,0,0,0,1,1])
print("we've created: ", y)

y_tensor = torch.tensor(y)
print("we've created a tensor now: ", y_tensor)

z_tensor = torch.tensor([0,0,0,0,0,1,1,1,1,1])
print("we've create this tensor now: ", z_tensor)

y_shape = y_tensor.shape
print(y_shape)

first_entry = y_tensor[0] # we use index 0 for the first element in Python
print("the first entry is: ", first_entry)

second_entry = y_tensor[1]
print("the second entry is: ", second_entry)

y_tensor.sum()
y_tensor.float().mean()

from torch.autograd.grad_mode import enable_grad
# We create a tensor that has 100 rows and 100 columns
torch.manual_seed(0) 
w = torch.randn(100,100)
print(w.shape)

#TO-DO: select the first 10 rows of w
w_ = w[0:10, :]
print(w_.shape)

#TO-DO: select the last 10 columns of w
w_ = w[:, -10:]
print(w_.shape)

#TO-DO: select the element in row 2 and column 5
w_ = w[2, 5]
print(w_)

# TO-DO reshape the tensor w into a 10 by 1000 tensor 
w_ = torch.reshape(w, (10, 1000))
print(w_.shape)

# TO-DO reshape the tensor w into a 1 by 10000 tensor 
w_ = torch.reshape(w, (1, 10000))
print(w_.shape)

def accuracy(pred, y):
  #TO-DO compute the accuracy
  acc_t = torch.eq(pred, y)
  acc = acc_t.float().mean()
  return acc
  
y_tensor = torch.tensor([0, 1, 0, 1])
pred_tensor = torch.tensor([1, 1, 0, 1])
accuracy(pred_tensor, y_tensor)

torch.manual_seed(0) 
X = torch.randn(1, 5)
B = torch.randn((5,1))
#TO-DO: multiply the tensors X and B (i.e., compute Y = BX)
Y = torch.matmul(X, B)
print(Y)

torch.manual_seed(0) 
import torch
import torch.nn as nn

